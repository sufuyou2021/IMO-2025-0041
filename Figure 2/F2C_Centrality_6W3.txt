

library(igraph)
library(readxl)
library(corrplot)
library(scales)
library(qgraph)
library(bootnet)

nor6 <- read_excel("C:/Users/mahler/Desktop/Figure 2.xlsx", 
                   sheet = "F2C_Centrality_6NW3")
 gene_cor = cor(nor6, method = c("pearson"))

gene_dist=as.matrix(dist(nor6, method="euclidean"))





g <- graph.adjacency(
  gene_cor,
  mode="undirected",
  weighted=TRUE,
  diag=FALSE
)
# Simplfy the adjacency object
g <- simplify(g, remove.multiple=TRUE, remove.loops=TRUE)
# Colour negative correlation edges as blue
E(g)[which(E(g)$weight<0)]$color <- "navy"
# Colour positive correlation edges as red
E(g)[which(E(g)$weight>0)]$color <- "firebrick3"
# Convert edge weights to absolute values
E(g)$weight <- abs(E(g)$weight)
# Remove edges below absolute Pearson correlation 0.8
g <- delete_edges(g, E(g)[which(E(g)$weight<0.57)])
# Remove any vertices remaining that have no edges
g <- delete.vertices(g, degree(g)==0)
# Assign names to the graph vertices (optional)
V(g)$name <- V(g)$name
# Change shape of graph vertices
V(g)$shape <- "sphere"

# Change colour of graph vertices
V(g)$color <- "skyblue"

# Change colour of vertex frames
V(g)$vertex.frame.color <- "white"
# Scale the size of the vertices to be proportional to the level of expression of each gene represented by each vertex
# Multiply scaled vales by a factor of 10
scale01 <- function(x){(x-min(x))/(max(x)-min(x))}
vSizes <- (scale01(apply(nor6, 1, mean)) + 1.0) * 5

# Amplify or decrease the width of the edges
edgeweights <- E(g)$weight * 2.0
# Convert the graph adjacency object into a minimum spanning tree based on Prim's algorithm
mstn6 <- mst(g, algorithm="prim")

nor6 <- read_excel("C:/Users/mahler/Desktop/Figure 2.xlsx", 
                   sheet = "F2C_Centrality_6SW3")
 gene_cor = cor(nor6, method = c("pearson"))

gene_dist=as.matrix(dist(nor6, method="euclidean"))

g <- graph.adjacency(
  gene_cor,
  mode="undirected",
  weighted=TRUE,
  diag=FALSE
)
# Simplfy the adjacency object
g <- simplify(g, remove.multiple=TRUE, remove.loops=TRUE)
# Colour negative correlation edges as blue
E(g)[which(E(g)$weight<0)]$color <- "navy"
# Colour positive correlation edges as red
E(g)[which(E(g)$weight>0)]$color <- "firebrick3"
# Convert edge weights to absolute values
E(g)$weight <- abs(E(g)$weight)
# Remove edges below absolute Pearson correlation 0.8
g <- delete_edges(g, E(g)[which(E(g)$weight<0.57)])
# Remove any vertices remaining that have no edges
g <- delete.vertices(g, degree(g)==0)
# Assign names to the graph vertices (optional)
V(g)$name <- V(g)$name
# Change shape of graph vertices
V(g)$shape <- "sphere"

# Change colour of graph vertices
V(g)$color <- "skyblue"

# Change colour of vertex frames
V(g)$vertex.frame.color <- "white"
# Scale the size of the vertices to be proportional to the level of expression of each gene represented by each vertex
# Multiply scaled vales by a factor of 10
scale01 <- function(x){(x-min(x))/(max(x)-min(x))}
vSizes <- (scale01(apply(nor6, 1, mean)) + 1.0) * 5

# Amplify or decrease the width of the edges
edgeweights <- E(g)$weight * 2.0
# Convert the graph adjacency object into a minimum spanning tree based on Prim's algorithm
msts6 <- mst(g, algorithm="prim")


nor6 <- read_excel("C:/Users/mahler/Desktop/Figure 2.xlsx",  
                   sheet = "F2C_Centrality_6EAW3")
 gene_cor = cor(nor6, method = c("pearson"))

gene_dist=as.matrix(dist(nor6, method="euclidean"))

g <- graph.adjacency(
  gene_cor,
  mode="undirected",
  weighted=TRUE,
  diag=FALSE
)
# Simplfy the adjacency object
g <- simplify(g, remove.multiple=TRUE, remove.loops=TRUE)
# Colour negative correlation edges as blue
E(g)[which(E(g)$weight<0)]$color <- "navy"
# Colour positive correlation edges as red
E(g)[which(E(g)$weight>0)]$color <- "firebrick3"
# Convert edge weights to absolute values
E(g)$weight <- abs(E(g)$weight)
# Remove edges below absolute Pearson correlation 0.8
g <- delete_edges(g, E(g)[which(E(g)$weight<0.57)])
# Remove any vertices remaining that have no edges
g <- delete.vertices(g, degree(g)==0)
# Assign names to the graph vertices (optional)
V(g)$name <- V(g)$name
# Change shape of graph vertices
V(g)$shape <- "sphere"

# Change colour of graph vertices
V(g)$color <- "skyblue"

# Change colour of vertex frames
V(g)$vertex.frame.color <- "white"
# Scale the size of the vertices to be proportional to the level of expression of each gene represented by each vertex
# Multiply scaled vales by a factor of 10
scale01 <- function(x){(x-min(x))/(max(x)-min(x))}
vSizes <- (scale01(apply(nor6, 1, mean)) + 1.0) * 5

# Amplify or decrease the width of the edges
edgeweights <- E(g)$weight * 2.0
# Convert the graph adjacency object into a minimum spanning tree based on Prim's algorithm
mste6 <- mst(g, algorithm="prim")



qgraph::centralityPlot(
  list(
       S_6W3=msts6,
       EA_6W3=mste6,
       N_6W3=mstn6
      ), include = "all", scale = c("z-scores"))


